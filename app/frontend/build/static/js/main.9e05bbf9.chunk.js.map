{"version":3,"sources":["Products.js","App.js","serviceWorker.js","index.js"],"names":["Products","props","state","modalOpen","validAddProduct","isLoadingProducts","isLoadingAdding","products","newProductSku","newProductAtts","key","value","openModal","bind","closeModal","updateProducts","createProduct","this","className","rel","href","integrity","crossOrigin","variant","size","onClick","renderLoadingProducts","createCards","show","onHide","Header","closeButton","Title","Body","Group","controlId","Label","Control","type","placeholder","onChange","event","setState","target","map","att","index","arr","splice","push","renderLoadingAdding","Footer","disabled","fetch","method","headers","then","response","json","data","undefined","results","parseProducts","trim","mode","body","JSON","stringify","getCleanAttributes","finally","atts","parsed","product","attributes","Object","keys","sku","cards","Img","src","bordered","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e05bbf9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport class Products extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          modalOpen: false,\r\n          validAddProduct: true,\r\n          isLoadingProducts: true,\r\n          isLoadingAdding: false,\r\n          products: [],\r\n          newProductSku: '',\r\n          newProductAtts: [{\r\n                key: '',\r\n                value: ''\r\n          }]\r\n       };\r\n\r\n       this.openModal = this.openModal.bind(this);\r\n       this.closeModal = this.closeModal.bind(this);\r\n       this.updateProducts = this.updateProducts.bind(this);\r\n       this.createProduct = this.createProduct.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProducts();\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <div className=\"product-page\">\r\n                <link\r\n                    rel=\"stylesheet\"\r\n                    href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n                    integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n                    crossOrigin=\"anonymous\"\r\n                />\r\n\r\n                <Button variant=\"primary\" size=\"md\" className=\"add-button\" onClick={this.openModal}>Add Product</Button>\r\n\r\n                {this.renderLoadingProducts()}\r\n\r\n                <CardColumns>\r\n                    {this.createCards(this.state.products)}\r\n                </CardColumns>\r\n\r\n                <Modal show={this.state.modalOpen} onHide={this.closeModal}>\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>Add Product</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n\r\n                    <Form>\r\n                        <Form.Group controlId=\"productSku\">\r\n                            <Form.Label>SKU</Form.Label>\r\n                            <Form.Control \r\n                                type=\"text\" \r\n                                placeholder=\"Product SKU\"\r\n                                value={this.state.newProductSku}\r\n                                onChange={(event) => {this.setState({ newProductSku: event.target.value })}}\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Label>Attributes</Form.Label>\r\n\r\n                        {this.state.newProductAtts.map((att,index) => {\r\n\r\n                            return <Row className=\"new-attr-row\" key={index}>\r\n                                <Col>\r\n                                    <Form.Control \r\n                                        placeholder=\"Key\" \r\n                                        type=\"text\" \r\n                                        value={this.state.newProductAtts[index].key}\r\n                                        onChange={(event) => {\r\n                                            let arr = [...this.state.newProductAtts];\r\n                                            arr[index].key = event.target.value;\r\n                                            this.setState({ newProductAtts: arr })\r\n                                        }} \r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Control \r\n                                        placeholder=\"Value\" \r\n                                        type=\"text\" \r\n                                        value={this.state.newProductAtts[index].value}\r\n                                        onChange={(event) => {\r\n                                            let arr = [...this.state.newProductAtts];\r\n                                            arr[index].value = event.target.value;\r\n                                            this.setState({ newProductAtts: arr })\r\n                                        }} \r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"link\" onClick={() => {\r\n                                        let arr = [...this.state.newProductAtts];\r\n                                        arr.splice(index,1);\r\n                                        this.setState({newProductAtts: arr});\r\n                                    }}>Remove</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        })}\r\n                        \r\n\r\n                        <Button \r\n                            className=\"add-attr-btn mt-2\" \r\n                            variant=\"primary\" \r\n                            size=\"sm\"\r\n                            onClick={() => {\r\n                                let arr = [...this.state.newProductAtts];\r\n                                arr.push({key: '', value: ''});\r\n                                this.setState({newProductAtts: arr});\r\n                            }}>\r\n                            New Attribute\r\n                        </Button>\r\n                    </Form>\r\n\r\n\r\n                    {this.renderLoadingAdding()}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button variant=\"success\" onClick={this.createProduct} disabled={!this.state.validAddProduct}>\r\n                        Add\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={this.closeModal}>\r\n                        Close\r\n                    </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({modalOpen: false})\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({modalOpen: true});\r\n    }\r\n\r\n    updateProducts() {\r\n        this.setState({isLoadingProducts: true});\r\n        fetch('http://localhost:5000/products', {\r\n            method: 'GET',\r\n            headers: {'Content-Type': 'application/json'}\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState({isLoadingProducts: false})\r\n            if(data.results !== undefined) {\r\n                this.setState({\r\n                    products: this.parseProducts(data.results)\r\n                });\r\n                \r\n            }\r\n        });\r\n    }\r\n\r\n    createProduct() {\r\n        if (this.state.newProductSku.trim() != '') {\r\n\r\n            this.setState({isLoadingAdding: true});\r\n\r\n            fetch('http://localhost:5000/products', {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    'sku': this.state.newProductSku.trim(),\r\n                    'attributes': this.getCleanAttributes()\r\n                })\r\n            })\r\n            .then((response) => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    newProductSku: '',\r\n                    newProductAtts: [{\r\n                        key: '',\r\n                        value: ''\r\n                    }]\r\n                });\r\n                this.updateProducts();\r\n                this.closeModal();\r\n            })\r\n            .finally(() => {\r\n                this.setState({isLoadingAdding: false});\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    getCleanAttributes() {\r\n        let atts = [...this.state.newProductAtts];\r\n        atts.map((att, index) => {\r\n            if(att.key.trim() == '') {\r\n                atts.splice(index,1);\r\n            }\r\n        });\r\n        return atts;\r\n    }\r\n\r\n    parseProducts(products) {\r\n        let parsed = [];\r\n        products.map((product) => {\r\n            let attributes = [];\r\n            Object.keys(product.attributes).map((key) => {\r\n                attributes.push({key: key, value:product.attributes[key]});\r\n            });\r\n            parsed.push({sku: product.sku, attributes:attributes})\r\n        });\r\n        return parsed;\r\n    }\r\n\r\n    createCards(products) {\r\n        let cards = [];\r\n\r\n        products.map((product, index) => {\r\n            // Create attribute list\r\n            let attributes = [];\r\n            product.attributes.map((att, index) => {\r\n                attributes.push(\r\n                    <tr key={index}>\r\n                        <td>{att.key}</td>\r\n                        <td>{att.value}</td>\r\n                    </tr>\r\n                );\r\n            });\r\n\r\n            // Create Card\r\n            cards.push(<Card key={index}>\r\n                <Card.Img variant=\"top\" src=\"https://picsum.photos/id/526/400/200?blur=5\" />\r\n                    <Card.Body>\r\n                        <Card.Title>{product.sku}</Card.Title>\r\n                        <Table bordered size=\"sm\">\r\n                            <tbody>\r\n                            {attributes}\r\n                            </tbody>\r\n                        </Table>\r\n    \r\n                        {/* <Card.Link href=\"#\">Update</Card.Link>\r\n                        <Card.Link href=\"#\">Delete</Card.Link> */}\r\n    \r\n                    </Card.Body>\r\n                </Card>);\r\n        });\r\n        \r\n\r\n        return cards;\r\n    }\r\n\r\n    renderLoadingProducts() {\r\n        return(<div className={this.state.isLoadingProducts ? 'lds-ellipsis' : 'hidden'}><div></div><div></div><div></div><div></div></div>)\r\n    }\r\n\r\n    renderLoadingAdding() {\r\n        return(<div className={this.state.isLoadingAdding ? 'lds-ellipsis' : 'hidden'}><div></div><div></div><div></div><div></div></div>)\r\n    }\r\n\r\n}\r\n\r\nexport default Products;","import React from 'react';\r\nimport Products from './Products';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Products></Products>\r\n  );\r\n}\r\n\r\nexport default App;\r\n ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}